# 1. Crea una funci√≥n que intente dividir dos n√∫meros proporcionados por el usuario. Usa try-except para capturar cualquier error de divisi√≥n (por ejemplo, divisi√≥n por cero).
def divide_numbers():
    try:
        num1 = float(input("Ingrese el primer n√∫mero: "))
        num2 = float(input("Ingrese el segundo n√∫mero: "))
        result = num1 / num2
    except ZeroDivisionError:
        print("Error: Divisi√≥n por cero no permitida.")
    except ValueError:
        print("Error: Entrada no v√°lida. Por favor ingrese n√∫meros.")
    else:
        print("El resultado de la divisi√≥n es:", result)
divide_numbers()

# 2. Crea una funci√≥n que tome una cadena e intente convertirla en un n√∫mero entero. Usa try-except para capturar cualquier error en la conversi√≥n.
def convert_to_integer(string):
    try:
        numero = int(string)
        print(f"Conversi√≥n exitosa: {numero}")
        return numero
    except ValueError:
        print("Error: No se pudo convertir la cadena a un n√∫mero entero.")
        return None
convert_to_integer("123")

# 3. Crea una funci√≥n que abra un archivo, lea su contenido y maneje posibles errores (por ejemplo, archivo no encontrado). Usa try-except para gestionar las operaciones de archivos de forma segura.
def leer_archivo(nombre_archivo):
    try:
        with open(nombre_archivo, 'r') as archivo:
            contenido = archivo.read()
            print("Contenido del archivo:")
            print(contenido)
            return contenido
    except FileNotFoundError:
        print(f"Error: El archivo '{nombre_archivo}' no fue encontrado.")
        return None
    except Exception as e:
        print(f"Ocurri√≥ un error inesperado: {e}")
        return None
leer_archivo("archivo_inexistente.txt")
# 4. Crea una funci√É¬≥n que realice m√É¬∫ltiples operaciones (suma, resta, divisi√É¬≥n, multiplicaci√É¬≥n) con dos n√É¬∫meros. Usa try-except-else-finally para manejar errores y asegurar que se imprima un mensaje final, independientemente de los errores.
def operaciones(a, b):
    try:
        suma = a + b
        resta = a - b
        multiplicacion = a * b
        division = a / b  # Puede lanzar ZeroDivisionError
    except ZeroDivisionError:
        print("Error: No se puede dividir entre cero.")
        return None
    except TypeError:
        print("Error: Ambos valores deben ser n√∫meros.")
        return None
    else:
        print("‚úÖ Operaciones realizadas con √©xito:")
        print(f"Suma: {suma}")
        print(f"Resta: {resta}")
        print(f"Multiplicaci√≥n: {multiplicacion}")
        print(f"Divisi√≥n: {division}")
        return suma, resta, multiplicacion, division
    finally:
        print("üîö Fin de la ejecuci√≥n de la funci√≥n.")
operaciones(10, 5)
# 5. Crea una funci√É¬≥n que le pida al usuario su edad y lance un ValueError si la entrada no es un n√É¬∫mero entero positivo. Usa el manejo de excepciones para gestionar la entrada y lanzar excepciones personalizadas cuando sea necesario.
def pedir_edad():
    try:
        edad = input("Introduce tu edad: ")
        edad = int(edad)
        if edad <= 0:
            raise ValueError("La edad debe ser un n√∫mero entero positivo.")
    except ValueError as e:
        print(f"Error: {e}")
        return None
    else:
        print(f"‚úÖ Edad v√°lida: {edad} a√±os")
        return edad
pedir_edad()
# 6. Crea una funci√É¬≥n que intente acceder a un elemento de una lista por √É¬≠ndice. Usa try-except para manejar el caso donde el √É¬≠ndice est√É¬© fuera de rango.
def acceder_elemento(lista, indice):
    try:
        elemento = lista[indice]
        print(f"Elemento en la posici√≥n {indice}: {elemento}")
        return elemento
    except IndexError:
        print(f"Error: El √≠ndice {indice} est√° fuera del rango de la lista.")
        return None
acceder_elemento([1, 2, 3], 5)
# 7. Crea una funci√É¬≥n que use try-except para manejar m√É¬∫ltiples excepciones: ZeroDivisionError, ValueError y TypeError.
def operar(val1, val2):
    try:
        resultado = int(val1) / int(val2)
        print(f"Resultado: {resultado}")
        return resultado
    except ZeroDivisionError:
        print("Error: No se puede dividir entre cero.")
    except ValueError:
        print("Error: Uno de los valores no es convertible a entero.")
    except TypeError:
        print("Error: Tipo de dato no v√°lido para la operaci√≥n.")
    return None
operar(10, 2)

# 8. Crea una funci√É¬≥n que simule una transacci√É¬≥n. Lanza una excepci√É¬≥n personalizada llamada InsufficientFundsError si el saldo es menor que la cantidad a retirar.
# Definimos la excepci√≥n personalizada
class InsufficientFundsError(Exception):
    def __init__(self, mensaje="Fondos insuficientes para completar la transacci√≥n."):
        super().__init__(mensaje)

# Funci√≥n que simula una transacci√≥n
def retirar_dinero(saldo, cantidad):
    try:
        if cantidad > saldo:
            raise InsufficientFundsError()
        saldo -= cantidad
        print(f"Transacci√≥n exitosa. Nuevo saldo: {saldo}")
        return saldo
    except InsufficientFundsError as e:
        print(f"Error: {e}")
        return saldo
retirar_dinero(100, 80)
# 9. Crea una funci√É¬≥n que intente convertir una lista de cadenas en enteros. Maneja cualquier error que surja cuando una cadena no pueda convertirse.
def convert_to_integers(string_list):
    int_list = []
    for item in string_list:
        try:
            int_list.append(int(item))
        except ValueError:
            print(f"No se pudo convertir '{item}' a entero.")
    return int_list

# 10. Crea una funci√É¬≥n que calcule la ra√É¬≠z cuadrada de un n√É¬∫mero. Lanza un ValueError si el n√É¬∫mero es negativo.
import math

def raiz_cuadrada(numero):
    if numero < 0:
        raise ValueError("No se puede calcular la ra√≠z cuadrada de un n√∫mero negativo.")
    resultado = math.sqrt(numero)
    print(f"La ra√≠z cuadrada de {numero} es {resultado}")
    return resultado
raiz_cuadrada(16)